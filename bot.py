import nest_asyncio  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
nest_asyncio.apply()  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ

import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from datetime import datetime
import gspread

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ========== #
TELEGRAM_TOKEN = "7945532914:AAEeZjJAs3iWxynhjgvMBOiKkBdxAuzB2c8"
GOOGLE_CREDS_FILE = "dogwood-cinema-457117-a2-43d4cd6fd399.json"
GOOGLE_SHEET_NAME = "–ü–∏—â–µ–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫"
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
# =============================== #

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
client = gspread.service_account(filename=GOOGLE_CREDS_FILE, scopes=SCOPES)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_COLUMN = 1

COLUMNS = [
    "–¥–∞—Ç–∞", "–æ—â—É—â–µ–Ω–∏—è", "–ø–µ—Ä–µ–∫—É—Å", "–æ—â—É—â–µ–Ω–∏—è", "–æ—â—É—â–µ–Ω–∏—è",
    "–∑–∞–≤—Ç—Ä–∞–∫", "–æ—â—É—â–µ–Ω–∏—è", "–æ—â—É—â–µ–Ω–∏—è", "–ø–µ—Ä–µ–∫—É—Å", "–æ—â—É—â–µ–Ω–∏—è",
    "–æ—â—É—â–µ–Ω–∏—è", "–æ–±–µ–¥", "–æ—â—É—â–µ–Ω–∏—è", "–æ—â—É—â–µ–Ω–∏—è", "–ø–µ—Ä–µ–∫—É—Å",
    "–æ—â—É—â–µ–Ω–∏—è", "–æ—â—É—â–µ–Ω–∏—è", "—É–∂–∏–Ω", "–æ—â—É—â–µ–Ω–∏—è"
]

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)

def find_or_create_today_row():
    """–ò—â–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã"""
    today = datetime.now().strftime("%d.%m.%Y")
    try:
        records = sheet.get_all_values()

        for i, row in enumerate(records[1:], start=2):
            if i % 2 == 0 and row[0] == today:
                return i

        new_row = len(records) + 2 if len(records) % 2 else len(records) + 1
        sheet.update_cell(new_row, 1, today)
        return new_row

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π: {e}")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçè –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–∏—â–µ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Ç—ã —Å—ä–µ–ª/—Å–¥–µ–ª–∞–ª, –∞ —è –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_data = context.user_data
        user_data["message"] = update.message.text.strip()
        user_data["current_row"] = find_or_create_today_row()

        columns_menu = "\n".join([f"{idx+1:>2}. {name}" for idx, name in enumerate(COLUMNS)])

        await update.message.reply_text(
            f"üìå –í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞—Ç—å:\n\n{columns_menu}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ (1-19):"
        )
        return CHOOSING_COLUMN

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("üò¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def choose_column(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    try:
        choice = int(update.message.text)
        if 1 <= choice <= 19:
            sheet.update_cell(user_data["current_row"], choice, user_data["message"])
            time_str = update.message.date.astimezone().strftime("%H:%M")
            sheet.update_cell(user_data["current_row"] + 1, choice, f"üïí {time_str}")

            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Å—Ç–æ–ª–±–µ—Ü {choice}!\n"
                f"–¢–µ–∫—Å—Ç: {user_data['message']}\n"
                f"–í—Ä–µ–º—è: {time_str}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä! –í–≤–µ–¥–∏ –æ—Ç 1 –¥–æ 19")

    except ValueError:
        await update.message.reply_text("üî¢ –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É!")

    finally:
        return ConversationHandler.END

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={CHOOSING_COLUMN: [MessageHandler(filters.TEXT, choose_column)]},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()